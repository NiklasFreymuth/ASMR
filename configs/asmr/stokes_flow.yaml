# Horeka
name: "SLURM"   # MUST BE "SLURM"

# Required
partition: "cpuonly"
job-name: "flow"    # this will be the experiment name in slurm
num_parallel_jobs: 5
time: 4300 # in minutes
cpus-per-task: 76
ntasks: 1

sbatch_args: # Dictionary of SBATCH keywords and arguments
  distribution: block  # To have repetitions of the same exp be distributed to different nodes
  nodes: 1
slurm_log: "./slurmlog"     # optional. dir in which slurm output and error logs will be saved.

---

name: "DEFAULT"   # MUST BE DEFAULT

repetitions: 10
reps_per_job: 10
reps_in_parallel: 10

import_path: "asmr_default.yaml"
params:
  environment:
    mesh_refinement:
      fem:
        pde_type: stokes_flow
        domain:
          domain_type: trapezoid_hole
          maximum_distortion: 0.45
      evaluation:
        # we only use 1 evaluation environment here because computing a new reference mesh for each evaluation step
        # is relatively costly
        fem:
          num_pdes: 1 # [ 1, 0 ]
          domain:
            fixed_domain: True # [ True, False ]
          stokes_flow:
            fixed_inlet: True # [ True, False ]


---
name: stokes_flow_asmr
list:
  recording:
    nametag: [ "asmr" ]
    idx: [ 1000 ] # give an id number to the experiments for easier comparison in the wandb pareto plots
  algorithm:
    mixed_return:
      global_weight: [ 0.5 ]
grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 0.3, 0.2, 0.015, 0.1, 0.075,
                 0.05, 0.04,
                 0.03, 0.025, 0.02, 0.015, 0.01
        ]

---
name: stokes_flow_single_agent
params:
  algorithm:
    ppo:
      value_function_scope: graph
  environment:
    mesh_refinement:
      refinement_strategy: single_agent  # refine exactly 1 element in every step as described in the single_agent paper
      element_penalty:
        value: 0.0  # no face penalty since we refine exactly 1 element in every step in any case
      reward_type: single_agent  # reward type of the original baseline paper. No need to do area comparisons here
      num_timesteps: 100  # give enough steps to make a nice refinement

list:
  recording:
    nametag: [ single_agent_ppo ]
    idx: [ 2000 ]
  algorithm:
    name: [ single_agent_ppo ]
grid:
  environment:
    mesh_refinement:
      num_timesteps: [ 25, 50, 75, 100, 150,
                       200, 250, 300, 350, 400 ]
---

name: stokes_flow_vdgn

params:
  environment:
    mesh_refinement:
      reward_type: vdgn
  algorithm:
    name: [ vdgn_ppo ]
    ppo:
      value_function_scope: vdn
list:
  recording:
    nametag: [ "vdgn_ppo" ]
    idx: [ 2100 ]
grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 0.02, 0.01, 0.0075, 0.005, 0.004, 0.003,
                 0.002, 0.001, 0.00075, 0.0005, 0.004, 0.0003]

---
name: stokes_flow_sweep

params:
  environment:
    environment_class: sweep_mesh_refinement
    mesh_refinement:
      element_penalty:
        value: 25
      num_training_timesteps: 200 # use different episode lengths for single agent training & multi-agent evaluation
      # here, we use 512 steps to give the agent enough time to learn the task
      num_evaluation_timesteps: 6
      reward_type: sweep  # use the sweep reward

      element_features: # Sweep exclusive features.
        resource_budget: True # current number of elements / maximum number of elements
        average_error: False
        average_solution: True
        mean_area_neighbors: True # Agent gets mean area of neighbor elements
        mean_edge_attributes: True # Mean
      include_globals: False # not used for this method, as global information is in the element features
  algorithm:
    network:
      type_of_base: sweep

    name: sweep_ppo
    ppo:
      value_function_scope: graph
      num_rollout_steps: 512
    dqn:
      steps_per_iteration: 96
      max_replay_buffer_size: 10000

list:
  recording:
    nametag: [ "sweep_ppo" ]
    idx: [ 2200 ]
  algorithm:
    name: [ sweep_ppo ]
grid:
  environment:
    mesh_refinement:
      maximum_elements: [ 200, 300, 400, 500, 750, 1000,
                          1250, 1500, 2000, 2500, 3000, 3500
      ]
---

name: stokes_flow_no_max_elements
repetitions: 1
reps_per_job: 1
reps_in_parallel: 1
iterations: 1
params:
  environment:
    mesh_refinement:
      maximum_elements: 1000000
---
name: stokes_flow_oracle_maxheuristic
repetitions: 1
reps_per_job: 1
reps_in_parallel: 1
iterations: 1

params:
  task:
    mesh_refinement:
      fem:
        error_metric: maximum