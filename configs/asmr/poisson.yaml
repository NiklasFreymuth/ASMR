# Horeka
name: "SLURM"   # MUST BE "SLURM"

# Required
partition: "cpuonly"
job-name: "poisson"    # this will be the experiment name in slurm
num_parallel_jobs: 20
time: 4000 # in minutes
cpus-per-task: 76
ntasks: 1

sbatch_args: # Dictionary of SBATCH keywords and arguments
  distribution: block  # To have repetitions of the same exp be distributed to different nodes
  nodes: 1
slurm_log: "./slurmlog"     # optional. dir in which slurm output and error logs will be saved.

---

name: "DEFAULT"   # MUST BE DEFAULT
import_path: "asmr_default.yaml"
params:
  environment:
    mesh_refinement:
      fem:
        pde_type: poisson
        domain:
          domain_type: lshape
          mean_hole_size: 0.15
          maximum_position_distortion: 0.3  # also doubles for the l-shape
      evaluation:
        fem:
          num_pdes: [ 1, 0 ]
          domain:
            fixed_domain: [ True, False ]
            maximum_position_distortion: [ 0.0, 0.3 ]
          poisson:
            fixed_load: [ True, False ]
      # final is set by default, I.e., we want to evaluate on the same setting that we use during training but with
      # new PDEs


---
# poisson experiments, including baselines
# this experiment is a list of 4 different methods that use a scaled area reward formulation
name: poisson_asmr
params:
  algorithm:
    mixed_return:
      global_weight: 0.5

list:
  recording:
    nametag: [ "asmr", "asmr_dqn",  "asmr_gat" ]
    idx: [ 1000, 1001, 1002 ]  # give a number to the experiments for easier comparison in the pareto plots
    # 1001 would dqn with normalization, which is worse
  algorithm:
    name: [ "ppo", "dqn",  "ppo" ]
    network:
      type_of_base: [ mpn, mpn, vdgn_gat ]

grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 0.1, 0.05, 0.03, 0.02, 0.01,
                 0.0075, 0.005, 0.004, 0.003, 0.002 ]

---
name: poisson_features
# different features for the graph

params:
  algorithm:
    mixed_return:
      global_weight: 0.5
list:
  recording:
    nametag: [ "no_load_function", "node_positions", "no_solution" ]
    idx: [ 1020, 1021, 1022 ]
  environment:
    mesh_refinement:
      fem:
        poisson:
          element_features:
            load_function: [ False, True, True ]
      element_features:
        x_position: [ False, True, False ]
        y_position: [ False, True, False ]
        solution_mean: [ True, True, False ]
        solution_std: [ True, True, False ]
grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 0.1, 0.05, 0.03, 0.02, 0.01, 0.0075, 0.005, 0.004, 0.003, 0.002 ]

---
name: poisson_num_pdes
# different number of pdes

params:
  algorithm:
    mixed_return:
      global_weight: 0.5
list:
  recording:
    nametag: [ "1_pde", "10_pdes", "1000_pdes" ]
    idx: [ 1023, 1024, 1022 ]
  environment:
    mesh_refinement:
      fem:
        num_pdes: [ 1, 10, 1000 ]

grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 0.1, 0.05, 0.03, 0.02, 0.01,
                 0.0075, 0.005, 0.004, 0.003, 0.002 ]

---
############################
### Baseline experiments ###
############################
# we have 3 baseline experiments:
# 1. single_agent https://arxiv.org/pdf/2103.01342.pdf
# 2. vdgn https://arxiv.org/pdf/2211.00801v3.pdf
# 3. sweep https://arxiv.org/pdf/2209.12351.pdf
#
# for each of these, we have 2 variants:
# 1. ppo
# 2. dqn
# (3.) for vdgn, we additionally consider a gat variant

# making for a total of 6 baseline experiments. We only do the full 6 experiments here, and take the better RL
# algorithm for each method for the other experiments
name: poisson_single_agent
params:
  algorithm:
    ppo:
      value_function_scope: graph
    dqn:
      max_replay_buffer_size: 10000
  environment:
    mesh_refinement:
      refinement_strategy: single_agent  # refine exactly 1 element in every step as described in the single_agent paper
      element_penalty:
        value: 0.0  # no face penalty since we refine exactly 1 element in every step in any case
      reward_type: single_agent  # reward type of the original baseline paper. No need to do area comparisons here
      num_timesteps: 100  # give enough steps to make a nice refinement

list:
  recording:
    nametag: [ single_agent_ppo, single_agent_dqn ]
    idx: [ 2000, 2001 ]
  algorithm:
    name: [ single_agent_ppo, single_agent_dqn ]
    network:
      base:
        architecture: [ "mpn", "mpn" ]
grid:
  environment:
    mesh_refinement:
      num_timesteps: [ 25, 50, 75, 100, 150,
                       200, 250, 300, 350, 400 ]

---
name: poisson_vdgn

params:
  environment:
    mesh_refinement:
      reward_type: vdgn
  algorithm:
    name: ppo
    ppo:
      value_function_scope: vdn
list:
  recording:
    nametag: [ "vdgn_ppo", "vdgn_ppo_gat", "vdgn_dqn", "vdgn_dqn_gat" ]
    idx: [ 2100, 2101, 2102, 2103 ]
  algorithm:
    name: [ppo, ppo, vdgn_dqn, vdgn_dqn]
    network:
      type_of_base: [ mpn, vdgn_gat, mpn, gat ]
grid:
  environment:
    mesh_refinement:
      element_penalty:
        value: [ 5.0e-2, 1.0e-2, 5.0e-3, 2.0e-3, 1.0e-3,
                 5.0e-4, 2.0e-4, 1.0e-4, 5.0e-5, 2.0e-5
                 ]
---
name: poisson_sweep

params:
  environment:
    environment_class: sweep_mesh_refinement
    mesh_refinement:
      element_penalty:
        value: 25
      num_training_timesteps: 200 # use different episode lengths for single agent training & multi-agent evaluation
      # here, we use 512 steps to give the agent enough time to learn the task
      num_evaluation_timesteps: 6
      reward_type: sweep  # use the sweep reward

      element_features: # Sweep exclusive features.
        resource_budget: True # current number of elements / maximum number of elements
        average_error: False
        average_solution: True
        mean_area_neighbors: True # Agent gets mean area of neighbor elements
        mean_edge_attributes: True # Mean
      include_globals: False # not used for this method, as global information is in the element features
  algorithm:
    network:
      type_of_base: sweep

    name: sweep_ppo
    ppo:
      value_function_scope: graph
      num_rollout_steps: 512
    dqn:
      steps_per_iteration: 96
      max_replay_buffer_size: 10000
list:
  recording:
    nametag: [ "sweep_ppo", "sweep_dqn" ]
    idx: [ 2200, 2201 ]
  algorithm:
    name: [ sweep_ppo, sweep_dqn ]
grid:
  environment:
    mesh_refinement:
      maximum_elements: [ 200, 300, 400, 500, 750,
                          1000, 1500, 2000, 2500, 3000 ]

---
name: poisson_no_max_elements
# for the oracle, zz error and uniform refinement
repetitions: 1
reps_per_job: 1
reps_in_parallel: 1
iterations: 1
params:
  environment:
    mesh_refinement:
      maximum_elements: 100000
---
name: poisson_oracle_maxheuristic
repetitions: 1
reps_per_job: 1
reps_in_parallel: 1
iterations: 1

params:
  task:
    mesh_refinement:
      fem:
        error_metric: maximum